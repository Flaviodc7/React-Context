{"version":3,"sources":["components/Header.jsx","contexts/UserContext.js","helpers/userData.js","pages/Home.jsx","pages/About.jsx","pages/NotFound.jsx","routes/AppRouter.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","className","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","to","UserContext","createContext","userData","data","email","first_name","last_name","avatar","support","url","text","Home","useContext","user","setUser","onClick","About","src","alt","width","height","NotFound","AppRouter","exact","path","component","App","useState","Provider","value","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mOAkCeA,EA/BA,WACb,OACE,qBAAKC,UAAU,kDAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,eAAd,yBACA,wBACEA,UAAU,iBACVC,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,oBAPb,SASE,sBAAMN,UAAU,0BAElB,qBAAKA,UAAU,2BAA2BO,GAAG,yBAA7C,SACE,qBAAIP,UAAU,kCAAd,UACE,oBAAIA,UAAU,cAAd,SACI,cAAC,IAAD,CAAMQ,GAAG,IAAIR,UAAU,kBAAvB,oBAEJ,oBAAIA,UAAU,cAAd,SACI,cAAC,IAAD,CAAMQ,GAAG,SAASR,UAAU,WAA5B,gCCvBHS,EAAcC,wBAAc,MCF5BC,EAAW,CACtBC,KAAM,CACJL,GAAI,EACJM,MAAO,2BACPC,WAAY,UACZC,UAAW,SACXC,OAAQ,2CAEVC,QAAS,CACPC,IAAK,qCACLC,KAAM,6ECoBKC,EA1BF,WAAO,IAAD,EACSC,qBAAWZ,GAA7Ba,EADS,EACTA,KAAMC,EADG,EACHA,QAUd,OACE,sBAAKvB,UAAU,6BAAf,UACE,6CAGGsB,EAGD,wBAAQtB,UAAU,iBAAiBwB,QAZpB,WACnBD,EAAQ,OAWJ,oBAFA,wBAAQvB,UAAU,kBAAkBwB,QAdtB,WAClBD,EAAQZ,IAaJ,uBCCOc,EAnBD,WAAO,IACXH,EAASD,qBAAWZ,GAApBa,KAER,OACE,sBAAKtB,UAAU,6BAAf,UACE,8CACEsB,EAEI,gCACI,wCAAWA,EAAKV,KAAKE,WAArB,eAA6CQ,EAAKV,KAAKG,aACvD,0CAAaO,EAAKV,KAAKC,SACvB,qBAAKa,IAAKJ,EAAKV,KAAKI,OAAQW,IAAKL,EAAKV,KAAKL,GAAIqB,MAAM,QAAQC,OAAO,aALrE,oBAAI7B,UAAU,cAAd,8BCCA8B,EARE,WACb,OAEQ,oBAAI9B,UAAU,+BAAd,iCCkBG+B,EAjBG,WACd,OACI,eAAC,IAAD,WACI,cAAC,EAAD,IAEA,eAAC,IAAD,WAEA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,SAASC,UAAWT,IACtC,cAAC,IAAD,CAAOQ,KAAK,IAAIC,UAAWJ,WCDxBK,EAVH,WAAO,IAAD,EACQC,mBAAS,MADjB,mBACTd,EADS,KACHC,EADG,KAGhB,OACE,cAACd,EAAY4B,SAAb,CAAsBC,MAAO,CAAEhB,OAAMC,WAArC,SACE,cAAC,EAAD,OCGcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.da9220ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-warning\">\r\n      <div className=\"container-fluid\">\r\n        <h2 className=\"navbar-brand\">Context App</h2>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"navbar-item\">\r\n                <Link to=\"/\" className=\"nav-link active\">Home</Link>\r\n            </li>\r\n            <li className=\"navbar-item\">\r\n                <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createContext } from 'react';\r\n\r\nexport const UserContext = createContext(null);","export const userData = {\r\n  data: {\r\n    id: 5,\r\n    email: \"charles.morris@reqres.in\",\r\n    first_name: \"Charles\",\r\n    last_name: \"Morris\",\r\n    avatar: \"https://reqres.in/img/faces/5-image.jpg\",\r\n  },\r\n  support: {\r\n    url: \"https://reqres.in/#support-heading\",\r\n    text: \"To keep ReqRes free, contributions towards server costs are appreciated!\",\r\n  },\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { UserContext } from \"../contexts/UserContext\";\r\nimport { userData } from \"../helpers/userData\";\r\n\r\nconst Home = () => {\r\n  const { user, setUser } = useContext(UserContext);\r\n\r\n  const handleLogin = () => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setUser(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container text-center mt-5\">\r\n      <h1>Home Screen</h1>\r\n\r\n      {\r\n        !user ? \r\n        <button className=\"btn btn-primary\" onClick={handleLogin}>Login</button>\r\n        :\r\n        <button className=\"btn btn-danger\" onClick={handleLogout}>Logout</button>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useContext } from \"react\";\r\nimport { UserContext } from \"../contexts/UserContext\";\r\n\r\nconst About = () => {\r\n  const { user } = useContext(UserContext);\r\n\r\n  return (\r\n    <div className=\"container text-center mt-5\">\r\n      <h1>About Screen</h1>\r\n      {!user ? <h2 className=\"text-danger\">Please Login</h2> :\r\n        (\r\n            <div>\r\n                <h3>Name: {user.data.first_name} Last Name: {user.data.last_name}</h3>\r\n                <h3>E-mail: {user.data.email}</h3>\r\n                <img src={user.data.avatar} alt={user.data.id} width=\"150px\" height=\"150px\" />\r\n            </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n            \r\n            <h1 className=\"text-center mt-3 text-danger\">404 Not Found Page</h1>\r\n\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\nimport Header from '../components/Header'\r\nimport Home from '../pages/Home'\r\nimport About from '../pages/About'\r\nimport NotFound from '../pages/NotFound'\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <Header />\r\n\r\n            <Switch>\r\n\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/about\" component={About} />\r\n            <Route path=\"/\" component={NotFound} />\r\n\r\n            </Switch>\r\n\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import React, { useState } from \"react\";\nimport AppRouter from \"./routes/AppRouter\";\nimport { UserContext } from \"./contexts/UserContext\";\n\nconst App = () => {\n  const [user, setUser] = useState(null);\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <AppRouter />\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}